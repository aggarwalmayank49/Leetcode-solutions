/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        if(root == NULL) return true;
        queue<TreeNode*> q;
        q.push(root);
        
        int level = 0;
        while(!q.empty()) {
            int x = q.size();
            // cout << "#" << level << ": ";
            if(level % 2 == 0) {
                int prev = INT_MIN;TreeNode *curr = q.front();
                for(int i = 0; i < x; ++i) {
                    curr = q.front();q.pop();
                    // cout << curr->val << ",";
                    if(curr->val % 2 == 0) return false;
                    if(curr->val <= prev) {
                        return false;
                    }
                    prev = curr->val;
                    if(curr->left) q.push(curr->left);     
                    if(curr->right) q.push(curr->right);

                }
                // cout << endl;
            }
            else {
                int prev = INT_MAX;TreeNode *curr = q.front();
                for(int i = 0; i < x; ++i) {
                    curr = q.front();q.pop();
                    // cout << curr->val << ",";
                    if(curr->val & 1) return false;
                    if(curr->val >= prev) {
                        return false;
                    }
                    prev = curr->val;
                    if(curr->left) q.push(curr->left);     
                    if(curr->right) q.push(curr->right);
                }
                // cout << endl;
            }
            level++;
            
        }
        // cout << "************" << endl;
        return true;
    }
};