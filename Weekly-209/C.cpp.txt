#define PI 3.141592654
class Solution {
public:
    int visiblePoints(vector<vector<int>>& points, int angle, vector<int>& location) {
        int n = points.size(), ans = 0, extra = 0;
        vector<pair<double, int>> v;
        for(int i = 0; i < n; ++i) {
            double x = points[i][0] - location[0];    
            double y = points[i][1] - location[1];
            if(x == 0 && y == 0) {
                extra++;
            }
            else if(x == 0) {
                if(y > 0) {
                    v.push_back({90, i});
                }
                else {
                    v.push_back({270, i});
                }
            }
            else if(y == 0) {
                if(x > 0) {
                    v.push_back({0, i});
                }
                else {
                    v.push_back({180, i});
                }
            }
            else {
                double a = atan(y / x) * 180 / PI;
                if(x < 0) a += 180;
                else {
                    if(y < 0) {
                        a += 360;
                    }
                }
                v.push_back({a, i});
            }
                
        }
        sort(v.begin(), v.end());
        // v.insert(v.end(), v.begin(), v.end());
        int vs = v.size();
        for(int i = 0; i < vs; ++i) {
            v.push_back({360+v[i].first, v[i].second});
        }
        
        // for(int i = 0; i < v.size(); ++i) {
        //     cout << v[i].first << " -> " << v[i].second << endl;
        // }
        // cout << "********" << endl;
        
        // if(v.size() == 0) return ans + extra;
        double start = 0;int j = 1, i = 0;
        // while(j < v.size() && v[j].first - start <= angle) j++;
        // ans = j;
        
        for(int i = 0; i < v.size(); ++i) {
            start = v[i].first;
            // cout << i << ": " << v[i].first << " j: "<< j << ", " << v[j].first << " ; ";
            while(j < v.size() && (v[j].first - start <= angle + 1e-5)) {
                // cout << " * ";
                j++;
            } 
            // cout << j << endl;
            
            ans = max(ans, j - i);
        }
        
        return ans + extra;
    }
};